// #define NOTE_D0 270
// #define NOTE_D1 294
// #define NOTE_D2 330
// #define NOTE_D3 370
// #define NOTE_D4 393
// #define NOTE_D5 441
// #define NOTE_D6 495
// #define NOTE_D7 556

// #define NOTE_DL1 147
// #define NOTE_DL2 165
// #define NOTE_DL3 175
// #define NOTE_DL4 196
// #define NOTE_DL5 221
// #define NOTE_DL6 248
// #define NOTE_DL7 278

// #define NOTE_DH1 589
// #define NOTE_DH2 661
// #define NOTE_DH3 700
// #define NOTE_DH4 786
// #define NOTE_DH5 882
// #define NOTE_DH6 990
// #define NOTE_DH7 
#define NOTE_D0 0
#define NOTE_D1 523
#define NOTE_D2 587
#define NOTE_D3 659
#define NOTE_D4 698
#define NOTE_D5 784
#define NOTE_D6 880
#define NOTE_D7 988

#define NOTE_DL1 261
#define NOTE_DL2 294
#define NOTE_DL3 329
#define NOTE_DL4 349
#define NOTE_DL5 392
#define NOTE_DL6 440
#define NOTE_DL7 493

#define NOTE_DH1 1046
#define NOTE_DH2 1175
#define NOTE_DH3 1318
#define NOTE_DH4 1397
#define NOTE_DH5 1568
#define NOTE_DH6 1760
#define NOTE_DH7 1976
//以上部分是定义是把每个音符和频率值对应起来，其实不用打这么多，但是都打上了，后面可以随意编写D调的各种歌，我这里用NOTE_D+数字表示音符，NOTE_DH+数字表示上面有点的那种音符，NOTE_DL+数字表示下面有点的那种音符。这样后面写起来比较好识别。
#define WHOLE 1
#define HALF 0.5
#define QUARTER 0.25
#define EIGHTH 0.25
#define SIXTEENTH 0.625
//这部分是用英文对应了拍子，这样后面也比较好看
int HULUWA[] = 
{
  NOTE_DH1,NOTE_D6,NOTE_D5,NOTE_D6,NOTE_D0,
  NOTE_DH1,NOTE_D6,NOTE_D5,NOTE_DH1,NOTE_D6,NOTE_D0,NOTE_D6,
  NOTE_D6,NOTE_D6,NOTE_D5,NOTE_D6,NOTE_D0,NOTE_D6,
  NOTE_DH1,NOTE_D6,NOTE_D5,NOTE_DH1,NOTE_D6,NOTE_D0,
  
  NOTE_D1,NOTE_D1,NOTE_D3,
  NOTE_D1,NOTE_D1,NOTE_D3,NOTE_D0,
  NOTE_D6,NOTE_D6,NOTE_D6,NOTE_D5,NOTE_D6,
  NOTE_D5,NOTE_D1,NOTE_D3,NOTE_D0,
  NOTE_DH1,NOTE_D6,NOTE_D6,NOTE_D5,NOTE_D6,
  NOTE_D5,NOTE_D1,NOTE_D2,NOTE_D0,
  NOTE_D7,NOTE_D7,NOTE_D5,NOTE_D3,
  NOTE_D5,
  NOTE_DH1,NOTE_D0,NOTE_D6,NOTE_D6,NOTE_D5,NOTE_D5,NOTE_D6,NOTE_D6,
  NOTE_D0,NOTE_D5,NOTE_D1,NOTE_D3,NOTE_D0,
  NOTE_DH1,NOTE_D0,NOTE_D6,NOTE_D6,NOTE_D5,NOTE_D5,NOTE_D6,NOTE_D6,
  NOTE_D0,NOTE_D5,NOTE_D1,NOTE_D2,NOTE_D0,
  NOTE_D3,NOTE_D3,NOTE_D1,NOTE_DL6,
  NOTE_D1,
  NOTE_D3,NOTE_D5,NOTE_D6,NOTE_D6,
  NOTE_D3,NOTE_D5,NOTE_D6,NOTE_D6,
  NOTE_DH1,NOTE_D0,NOTE_D7,NOTE_D5,
  NOTE_D6,
};//这部分就是整首曲子的音符部分，用了一个序列定义为HULUWA，整数
float HULUWA_duration[]=
{
  1,1,0.5,0.5,1,
  0.5,0.5,0.5,0.5,1,0.5,0.5,
  0.5,1,0.5,1,0.5,0.5,
  0.5,0.5,0.5,0.5,1,1,
  
  1,1,1+1,
  0.5,1,1+0.5,1,
  1,1,0.5,0.5,1,
  0.5,1,1+0.5,1,
  0.5,0.5,0.5,0.5,1+1,
  0.5,1,1+0.5,1,
  1+1,0.5,0.5,1,
  1+1+1+1,
  0.5,0.5,0.5+0.25,0.25,0.5+0.25,0.25,0.5+0.25,0.25,
  0.5,1,0.5,1,1,
  0.5,0.5,0.5+0.25,0.25,0.5+0.25,0.25,0.5+0.25,0.25,
  0.5,1,0.5,1,1,
  1+1,0.5,0.5,1,
  1+1+1+1,
  0.5,1,0.5,1+1,
  0.5,1,0.5,1+1,
  1+1,0.5,0.5,1,
  1+1+1+1
};//这部分是整首曲子的接拍部分，也定义个序列HULUWA_duration，浮点（数组的个数和前面音符的个数是一样的，一一对应么）
int HUANLESONG[] = 
{
  NOTE_D3,NOTE_D3,NOTE_D4,NOTE_D5,NOTE_D5,NOTE_D4,NOTE_D3,NOTE_D2,
  NOTE_D1,NOTE_D1,NOTE_D2,NOTE_D3,NOTE_D3,NOTE_D2,NOTE_D2,
  NOTE_D0,
  NOTE_D3,NOTE_D3,NOTE_D4,NOTE_D5,NOTE_D5,NOTE_D4,NOTE_D3,NOTE_D2,
  NOTE_D1,NOTE_D1,NOTE_D2,NOTE_D3,NOTE_D2,NOTE_D1,NOTE_D1,
  NOTE_D0,
  NOTE_D2,NOTE_D2,NOTE_D3,NOTE_D1,NOTE_D2,NOTE_D3,NOTE_D4,NOTE_D3,NOTE_D1,
  NOTE_D2,NOTE_D3,NOTE_D4,NOTE_D3,NOTE_D2,NOTE_D1,NOTE_D2,NOTE_DL5,
  NOTE_D0,
  NOTE_D3,NOTE_D3,NOTE_D4,NOTE_D5,NOTE_D5,NOTE_D4,NOTE_D3,NOTE_D2,
  NOTE_D1,NOTE_D1,NOTE_D2,NOTE_D3,NOTE_D2,NOTE_D1,NOTE_D1,

};//这部分就是整首曲子的音符部分，用了一个序列定义为tune，整数

float HUANLESONG_duration[]=
{
  1,1,1,1,1,1,1,1,1,1,1,1,2,0.5,1,
  1,
  1,1,1,1,1,1,1,1,1,1,1,1,2,0.5,1.5,
  1,
  1,1,1,1,1,0.5,0.5,1,1,1,0.5,0.5,1,1,1,1,1.5,
  1,
  1,1,1,1,1,1,1,1,1,1,1,1,2,0.5,1.5,

};
int PIPAYU[] =
{
  NOTE_DL6,NOTE_D3,NOTE_DH1,NOTE_DL6,NOTE_D2,NOTE_D7,
  NOTE_DL6,NOTE_D3,NOTE_DH1,NOTE_DL6,NOTE_D2,NOTE_D7,
  NOTE_D1,NOTE_DL7,
  NOTE_D1,NOTE_DL7,
  NOTE_D6,NOTE_D5,NOTE_D6,NOTE_D0,NOTE_D5,NOTE_D6,NOTE_D7,NOTE_D6,NOTE_D5,//1
  
  NOTE_D3,NOTE_D2,NOTE_D3,NOTE_D2,NOTE_D3,NOTE_D5,NOTE_D3,
  NOTE_D2,NOTE_D3,NOTE_D1,NOTE_DL7,NOTE_D1,NOTE_DL7,NOTE_DL5,
  NOTE_DL6,NOTE_D3,NOTE_D5,
  NOTE_D6,NOTE_D5,NOTE_D6,NOTE_D0,NOTE_D5,NOTE_D6,NOTE_D7,NOTE_D6,NOTE_D5,//2
  
  NOTE_D3,NOTE_D2,NOTE_D3,NOTE_D2,NOTE_D3,NOTE_D5,NOTE_D3,
  NOTE_D2,NOTE_D3,NOTE_D1,NOTE_DL7,NOTE_D1,NOTE_DL7,NOTE_DL5,
  NOTE_DL6,
  NOTE_D6,NOTE_D5,NOTE_D6,NOTE_D0,NOTE_D5,NOTE_D6,NOTE_D7,NOTE_D6,NOTE_D5,
  NOTE_D3,NOTE_D2,NOTE_D3,NOTE_D3,NOTE_D5,//3
  
  NOTE_D6,NOTE_D5,NOTE_D6,NOTE_D5,NOTE_D6,NOTE_D7,NOTE_DH1,NOTE_DH2,NOTE_D5,
  NOTE_DH2,NOTE_DH3,NOTE_DH3,NOTE_D0,NOTE_D5,NOTE_DH1,NOTE_DH3,
  NOTE_DH2,NOTE_DH3,NOTE_D6,NOTE_DH2,NOTE_DH3,NOTE_D6,
  NOTE_D4,NOTE_D5,NOTE_D6,NOTE_DH1,NOTE_D7,NOTE_D6,NOTE_D3,NOTE_DH3,
  NOTE_DH2,NOTE_DH3,NOTE_D6,NOTE_DH2,NOTE_DH3,NOTE_D6,//4
  
  NOTE_D6,NOTE_D7,NOTE_DH1,NOTE_DH2,NOTE_D7,NOTE_D5,NOTE_D6,
  NOTE_DL7,
  NOTE_D1,NOTE_DL7,
  NOTE_DH3,NOTE_DH3,NOTE_DH2,
  NOTE_DH3,NOTE_DH3,NOTE_DH6,
  NOTE_DH2,NOTE_DH1,NOTE_D7,NOTE_D5,
  NOTE_D6,NOTE_D6,NOTE_D7,NOTE_DH1,NOTE_DH2,//5
  
  NOTE_DH3,NOTE_DH3,NOTE_DH2,
  NOTE_DH3,NOTE_DH3,NOTE_DH6,
  NOTE_DH2,NOTE_DH1,NOTE_D7,NOTE_D5,
  NOTE_D6,
  NOTE_D6,NOTE_D5,NOTE_D6,NOTE_D0,NOTE_D5,NOTE_D6,NOTE_D7,NOTE_D6,NOTE_D5,
  NOTE_D3,NOTE_D2,NOTE_D3,NOTE_D3,NOTE_D5,//6
  
  NOTE_D6,NOTE_D5,NOTE_D6,NOTE_D5,NOTE_D6,NOTE_D7,NOTE_DH1,NOTE_DH2,NOTE_D5,
  NOTE_DH2,NOTE_DH3,NOTE_DH3,NOTE_D0,NOTE_D5,NOTE_DH1,NOTE_DH3,
  NOTE_DH2,NOTE_DH3,NOTE_D6,NOTE_DH2,NOTE_DH3,NOTE_D6,
  NOTE_D4,NOTE_D5,NOTE_D6,NOTE_DH1,NOTE_D7,NOTE_D6,NOTE_D3,NOTE_DH3,
  NOTE_DH2,NOTE_DH3,NOTE_D6,NOTE_DH2,NOTE_DH3,NOTE_D6,//7
  
  NOTE_D6,NOTE_D7,NOTE_DH1,NOTE_DH2,NOTE_D7,NOTE_D5,NOTE_D6,
  NOTE_DH3,NOTE_DH2,
  NOTE_DH3,NOTE_D3,NOTE_D5,
  NOTE_D6,NOTE_D5,NOTE_D6,NOTE_D0,NOTE_D5,NOTE_D6,NOTE_D7,NOTE_D6,NOTE_D5,
  NOTE_D3,NOTE_D2,NOTE_D3,NOTE_D2,NOTE_D3,NOTE_D5,NOTE_D3,//8
  
  NOTE_D2,NOTE_D3,NOTE_D1,NOTE_DL7,NOTE_D1,NOTE_DL7,NOTE_DL5,
  NOTE_DL6,NOTE_D3,NOTE_D5,
  NOTE_D6,NOTE_D5,NOTE_D6,NOTE_D0,NOTE_D5,NOTE_D6,NOTE_D7,NOTE_D6,NOTE_D5,
  NOTE_D3,NOTE_D2,NOTE_D3,NOTE_D2,NOTE_D3,NOTE_D5,NOTE_D3,//9
  
  NOTE_D2,NOTE_D3,NOTE_D1,NOTE_DL7,NOTE_D1,NOTE_DL7,NOTE_DL5,
  NOTE_DL6,
  NOTE_DL6,NOTE_D3,NOTE_DH1,NOTE_DL6,NOTE_D2,NOTE_D7,NOTE_D2,NOTE_D3,NOTE_D5,NOTE_D3,
  NOTE_D2,NOTE_D3,NOTE_D1,NOTE_DL7,NOTE_D1,NOTE_DL7,NOTE_DL5,
  NOTE_DL6,//10
};//这部分就是整首曲子的音符部分，用了一个序列定义为tune，整数

float PIPAYU_duration[]=
{
  0.125,0.125,0.75,0.125,0.125,0.75,
  0.125,0.125,0.75,0.125,0.125,0.75,
  1,1,
  1,1,
  0.375,0.125,0.75,0.125,0.125,0.125,0.125,0.125,0.125,//1
  
  0.375,0.125,1,0.125,0.125,0.125,0.125,
  0.375,0.125,1,0.125,0.125,0.125,0.125,
  1.5,0.25,0.25,
  0.375,0.125,0.75,0.125,0.125,0.125,0.125,0.125,0.125,//2
  
  0.375,0.125,1,0.125,0.125,0.125,0.125,
  0.375,0.125,1,0.125,0.125,0.125,0.125,
  2,
  0.375,0.125,0.75,0.125,0.125,0.125,0.125,0.125,0.125,
  0.375,0.125,1,0.25,0.25,//3
  
  0.375,0.125,0.75,0.125,0.125,0.125,0.125,0.125,0.125,
  0.375,0.125,0.5,0.25,0.25,0.25,0.25,
  0.375,0.125,0.5,0.375,0.125,0.5,
  0.125,0.125,0.125,0.125,0.25,0.25,0.75,0.25,
  0.375,0.125,0.5,0.375,0.125,0.5,//4
  
  0.125,0.125,0.125,0.125,0.25,0.25,1,
  2,
  1,1,
  1,0.5,0.5,
  1,0.5,0.5,
  0.5,0.5,0.5,0.5,
  1,0.25,0.25,0.25,0.25,//5
  
  1,0.5,0.5,
  1,0.5,0.5,
  0.5,0.5,0.5,0.5,
  2,
  0.375,0.125,0.75,0.125,0.125,0.125,0.125,0.125,0.125,
  0.375,0.125,1,0.25,0.25,//6
  
  0.375,0.125,0.75,0.125,0.125,0.125,0.125,0.125,0.125,
  0.375,0.125,0.5,0.25,0.25,0.25,0.25,
  0.375,0.125,0.5,0.375,0.125,0.5,
  0.125,0.125,0.125,0.125,0.25,0.25,0.75,0.25,
  0.375,0.125,0.5,0.375,0.125,0.5,//7
  
  0.125,0.125,0.125,0.125,0.25,0.25,1,
  1,1,
  1.5,0.25,0.25,
  0.375,0.125,0.75,0.125,0.125,0.125,0.125,0.125,0.125,
  0.375,0.125,1,0.125,0.125,0.125,0.125,//8
  
  0.375,0.125,1,0.125,0.125,0.125,0.125,
  1.5,0.25,0.25,
  0.375,0.125,0.75,0.125,0.125,0.125,0.125,0.125,0.125,
  0.375,0.125,1,0.125,0.125,0.125,0.125,//9
  
  0.375,0.125,1,0.125,0.125,0.125,0.125,
  2,
  0.125,0.125,0.75,0.125,0.125,0.25,0.125,0.125,0.125,0.125,
  0.375,0.125,1,0.125,0.125,0.125,0.125,
  2,//10
};
int TIANKONG[] =  
{  
 NOTE_D0,NOTE_D0,NOTE_D0,NOTE_D6,NOTE_D7,NOTE_DH1,NOTE_D7,NOTE_DH1,NOTE_DH3,NOTE_D7,NOTE_D7,NOTE_D7,NOTE_D3,NOTE_D3,
 NOTE_D6,NOTE_D5,NOTE_D6,NOTE_DH1,NOTE_D5,NOTE_D5,NOTE_D5,NOTE_D3,NOTE_D4,NOTE_D3,NOTE_D4,NOTE_DH1,
 NOTE_D3,NOTE_D3,NOTE_D0,NOTE_DH1,NOTE_DH1,NOTE_DH1,NOTE_D7,NOTE_D4,NOTE_D4,NOTE_D7,NOTE_D7,NOTE_D7,NOTE_D0,NOTE_D6,NOTE_D7,
 NOTE_DH1,NOTE_D7,NOTE_DH1,NOTE_DH3,NOTE_D7,NOTE_D7,NOTE_D7,NOTE_D3,NOTE_D3,NOTE_D6,NOTE_D5,NOTE_D6,NOTE_DH1,
 NOTE_D5,NOTE_D5,NOTE_D5,NOTE_D2,NOTE_D3,NOTE_D4,NOTE_DH1,NOTE_D7,NOTE_D7,NOTE_DH1,NOTE_DH1,NOTE_DH2,NOTE_DH2,NOTE_DH3,NOTE_DH1,NOTE_DH1,NOTE_DH1,
 NOTE_DH1,NOTE_D7,NOTE_D6,NOTE_D6,NOTE_D7,NOTE_D5,NOTE_D6,NOTE_D6,NOTE_D6,NOTE_DH1,NOTE_DH2,NOTE_DH3,NOTE_DH2,NOTE_DH3,NOTE_DH5,
 NOTE_DH2,NOTE_DH2,NOTE_DH2,NOTE_D5,NOTE_D5,NOTE_DH1,NOTE_D7,NOTE_DH1,NOTE_DH3,NOTE_DH3,NOTE_DH3,NOTE_DH3,NOTE_DH3,
 NOTE_D6,NOTE_D7,NOTE_DH1,NOTE_D7,NOTE_DH2,NOTE_DH2,NOTE_DH1,NOTE_D5,NOTE_D5,NOTE_D5,NOTE_DH4,NOTE_DH3,NOTE_DH2,NOTE_DH1,
 NOTE_DH3,NOTE_DH3,NOTE_DH3,NOTE_DH3,NOTE_DH6,NOTE_DH6,NOTE_DH5,NOTE_DH5,NOTE_DH3,NOTE_DH2,NOTE_DH1,NOTE_DH1,NOTE_D0,NOTE_DH1,
 NOTE_DH2,NOTE_DH1,NOTE_DH2,NOTE_DH2,NOTE_DH5,NOTE_DH3,NOTE_DH3,NOTE_DH3,NOTE_DH3,NOTE_DH6,NOTE_DH6,NOTE_DH5,NOTE_DH5,
 NOTE_DH3,NOTE_DH2,NOTE_DH1,NOTE_DH1,NOTE_D0,NOTE_DH1,NOTE_DH2,NOTE_DH1,NOTE_DH2,NOTE_DH2,NOTE_D7,NOTE_D6,NOTE_D6,NOTE_D6,NOTE_D6,NOTE_D7
};//这部分就是整首曲子的音符部分，用了一个序列定义为tune，整数

float TIANKONG_duration[]= 

{  
  1,1,1,0.5,0.5,     1+0.5,0.5,1,1,     1,1,1,0.5,0.5,
  1+0.5,0.5,1,1,     1,1,1,1,          1+0.5,0.5,1,1, 
  1,1,0.5,0.5,0.5,0.5,    1+0.5,0.5,1,1,     1,1,1,0.5,0.5,
  1+0.5,0.5,1,1,    1,1,1,0.5,0.5,     1+0.5,0.5,1,1,
  1,1,1,0.5,0.5,    1,0.5,0.25,0.25,0.25,0.5,    0.5,0.5,0.5,0.25,0.5,1,
  0.5,0.5,0.5,0.5,1,1,    1,1,1,0.5,0.5,    1+0.5,0.5,1,1,
  1,1,1,0.5,0.5,    1.5,0.5,1,1,    1,1,1,1,
  0.5,0.5,1,1,0.5,0.5,    1.5,0.25,0.5,1,    1,1,1,1,
  1,1,1,1,    1,1,1,1,    0.5,0.5,1,1,0.5,0.5,
  1,0.5,0.5,1,1,    1,1,1,1,    1,1,1,1,
  0.5,0.5,1,1,0.5,0.5,    1,0.5,0.25,0.5,1,    1,1,1,0.5,0.5
};
int length;//这里定义一个变量，后面用来表示共有多少个音符
int tonePin=3;//蜂鸣器的pin
int bell_flag = 3;
void setup()
{
  Serial.begin(9600);
Set_Tone();
}

void loop()
{
  // Bell();
  Serial.print()
  delay(1000);
}
void Set_Tone(){
  pinMode(tonePin,OUTPUT);//设置蜂鸣器的pin为输出模式
  
}

void Bell(){
  switch (bell_flag)
  {
  case 0:
    length = sizeof(HULUWA)/sizeof(HULUWA[0]);//这里用了一个sizeof函数，可以查出tone序列里有多少个音符
    for(int x=0;x<length;x++)//循环音符的次数
    {
      tone(tonePin,HULUWA[x]);//此函数依次播放HULUWA序列里的数组，即每个音符
      delay(400*HULUWA_duration[x]);//每个音符持续的时间，即节拍HULUWA_duration，400是调整时间的越大，曲子速度越慢，越小曲子速度越快，自己掌握吧
      // noTone(tonePin);//停止当前音符，进入下一音符
    }
    break;
  case 1:
    length = sizeof(HUANLESONG)/sizeof(HUANLESONG[0]);//这里用了一个sizeof函数，可以查出tone序列里有多少个音符
    for(int x=0;x<length;x++)//循环音符的次数
    {
      tone(tonePin,HUANLESONG[x]);//此函数依次播放HULUWA序列里的数组，即每个音符
      delay(400*HUANLESONG_duration[x]);//每个音符持续的时间，即节拍HULUWA_duration，400是调整时间的越大，曲子速度越慢，越小曲子速度越快，自己掌握吧
      // noTone(tonePin);//停止当前音符，进入下一音符
    }
    break;
  case 2:
    length = sizeof(PIPAYU)/sizeof(PIPAYU[0]);//这里用了一个sizeof函数，可以查出tone序列里有多少个音符
    for(int x=0;x<length;x++)//循环音符的次数
    {
      tone(tonePin,PIPAYU[x]);//此函数依次播放HULUWA序列里的数组，即每个音符
      delay(1150*PIPAYU_duration[x]);//每个音符持续的时间，即节拍HULUWA_duration，400是调整时间的越大，曲子速度越慢，越小曲子速度越快，自己掌握吧
      // noTone(tonePin);//停止当前音符，进入下一音符
    }
    break;
  case 3:
    length = sizeof(TIANKONG)/sizeof(TIANKONG[0]);//这里用了一个sizeof函数，可以查出tone序列里有多少个音符
    for(int x=0;x<length;x++)//循环音符的次数
    {
      tone(tonePin,TIANKONG[x]);//此函数依次播放HULUWA序列里的数组，即每个音符
      delay(600*TIANKONG_duration[x]);//每个音符持续的时间，即节拍HULUWA_duration，400是调整时间的越大，曲子速度越慢，越小曲子速度越快，自己掌握吧
      // noTone(tonePin);//停止当前音符，进入下一音符
    }
    break;
  default:
    break;
  }

}